{"name":"Synology","tagline":"","body":"# Synology\r\n\r\nThe following code is my test project, you can use it as a guide for now. I will write the documentation, I promise.\r\n\r\n```csharp\r\nusing (var syno = new SynologyConnection(LoginData.Url, true))\r\n{\r\n\tConsole.WriteLine(\"Info\");\r\n\tvar resInfo = syno.Api().Info().GetInfo();\r\n\r\n\tConsole.WriteLine(JsonConvert.SerializeObject(resInfo));\r\n\r\n\tConsole.WriteLine(\"Auth Login\");\r\n\tvar resLogin = syno.Api().Auth().Login(LoginData.Username, LoginData.Password);\r\n\r\n\tConsole.WriteLine(JsonConvert.SerializeObject(resLogin));\r\n\r\n\tif (resLogin.Error == null || (resLogin.Error != null && resLogin.Error.Code == 403))\r\n\t{\r\n\t\tif (resLogin.Error != null && resLogin.Error.Code == 403)\r\n\t\t{\r\n\t\t\tdo\r\n\t\t\t{\r\n\t\t\t\tConsole.Write(\"Otp Code: \");\r\n\r\n\t\t\t\tvar otp = Console.ReadLine();\r\n\r\n\t\t\t\tresLogin = syno.Api().Auth().Login(LoginData.Username, LoginData.Password, otp);\r\n\r\n\t\t\t\tConsole.WriteLine(JsonConvert.SerializeObject(resLogin));\r\n\t\t\t}\r\n\t\t\twhile (resLogin.Error != null && resLogin.Error.Code == 404);\r\n\t\t}\r\n\r\n\t\tif (resLogin.Error == null)\r\n\t\t{\r\n\t\t\tConsole.WriteLine(\"DS Info\");\r\n\t\t\tvar dsResInfo = syno.DownloadStation().Info().GetInfo();\r\n\t\t\tConsole.WriteLine(JsonConvert.SerializeObject(dsResInfo));\r\n\r\n\t\t\tConsole.WriteLine(\"DS Config\");\r\n\t\t\tvar dsResConfig = syno.DownloadStation().Info().Config();\r\n\t\t\tConsole.WriteLine(JsonConvert.SerializeObject(dsResConfig));\r\n\r\n\t\t\tConsole.WriteLine(\"DS Schedule Config\");\r\n\t\t\tvar dsResSchedule = syno.DownloadStation().Schedule().Config();\r\n\t\t\tConsole.WriteLine(JsonConvert.SerializeObject(dsResSchedule));\r\n\r\n\t\t\tConsole.WriteLine(\"DS Task List\");\r\n\t\t\tvar dsResTasks = syno.DownloadStation().Task().List(TaskDetailsType.Detail | TaskDetailsType.Transfer | TaskDetailsType.File | TaskDetailsType.Tracker | TaskDetailsType.Peer);\r\n\t\t\tConsole.WriteLine(JsonConvert.SerializeObject(dsResTasks));\r\n\r\n\t\t\tConsole.WriteLine(\"FS Info\");\r\n\t\t\tvar fsResInfo = syno.FileStation().Info().GetInfo();\r\n\t\t\tConsole.WriteLine(JsonConvert.SerializeObject(fsResInfo));\r\n\r\n\t\t\tConsole.WriteLine(\"FS List Share\");\r\n\t\t\tvar fsResShares = syno.FileStation().FileShare().ListShare(\"real_path,owner,time,perm,mount_point_type,sync_share,volume_status\");\r\n\t\t\tConsole.WriteLine(JsonConvert.SerializeObject(fsResShares));\r\n\r\n\t\t\tConsole.WriteLine(\"FS List\");\r\n\t\t\tvar fsResList = syno.FileStation().FileShare().List(\"/downloads\", null, \"all\", null, \"real_path,size,owner,time,perm,type,mount_point_type\");\r\n\t\t\tConsole.WriteLine(JsonConvert.SerializeObject(fsResList));\r\n\r\n\t\t\tConsole.WriteLine(\"FS Info\");\r\n\t\t\tvar fsResFileInfo = syno.FileStation().FileShare().Info(\"/downloads/.apdisk\", \"real_path,size,owner,time,perm,type,mount_point_type\");\r\n\t\t\tConsole.WriteLine(JsonConvert.SerializeObject(fsResFileInfo));\r\n\r\n\t\t\tConsole.WriteLine(\"Auth Logout\");\r\n\t\t\tvar resLogout = syno.Api().Auth().Logout();\r\n\t\t\tConsole.WriteLine(JsonConvert.SerializeObject(resLogout));\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}